{"version":3,"file":"static/js/61.5c56d2d1.chunk.js","mappings":"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","sources":["pages/personal/SocioForm.js","services/personal.service.js","services/zonas.service.js","utils/validators.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Alert,\r\n  CircularProgress,\r\n  Card,\r\n  CardContent,\r\n  Autocomplete,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\r\nimport { es } from 'date-fns/locale';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Save as SaveIcon,\r\n  PersonAdd as PersonAddIcon,\r\n  Edit as EditIcon,\r\n  Add as AddIcon\r\n} from '@mui/icons-material';\r\nimport { socioSchema } from '../../utils/validators';\r\nimport sociosService from '../../services/personal.service';\r\nimport zonasService from '../../services/zonas.service';\r\n\r\nfunction SocioForm() {\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n  const isEdit = Boolean(id);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [initialLoading, setInitialLoading] = useState(isEdit);\r\n  const [zonas, setZonas] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  \r\n  // Modal para agregar nueva zona\r\n  const [showAddZonaModal, setShowAddZonaModal] = useState(false);\r\n  const [newZonaName, setNewZonaName] = useState('');\r\n  const [newZonaDescription, setNewZonaDescription] = useState('');\r\n  const [savingZona, setSavingZona] = useState(false);\r\n  \r\n  // Estado para el Autocomplete de zona\r\n  const [selectedZona, setSelectedZona] = useState(null);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n    setValue,\r\n    watch\r\n  } = useForm({\r\n    resolver: yupResolver(socioSchema),\r\n    defaultValues: {\r\n      dni: '',\r\n      nombres: '',\r\n      apellidos: '',\r\n      celular: '',\r\n      zona: '',\r\n      direccion: '',\r\n      fechaJuramentacion: null\r\n    }\r\n  });\r\n\r\n  // Observar el campo de fecha para el DatePicker\r\n  const fechaJuramentacion = watch('fechaJuramentacion');\r\n\r\n  useEffect(() => {\r\n    const initializeForm = async () => {\r\n      // Limpiar zona seleccionada\r\n      setSelectedZona(null);\r\n      \r\n      // Primero cargar las zonas y esperar a que termine\r\n      console.log('🔄 Inicializando formulario...');\r\n      await loadInitialData();\r\n      \r\n      // Si es edición, cargar los datos después de que se hayan cargado las zonas\r\n      if (isEdit) {\r\n        // Obtener las zonas actualizadas del estado\r\n        const zonasResult = await zonasService.getZonas();\r\n        if (zonasResult.success) {\r\n          const zonasArray = Array.isArray(zonasResult.data) ? zonasResult.data : [];\r\n          console.log('🏢 Pasando zonas a loadSocio:', zonasArray.map(z => z.nombre));\r\n          await loadSocio(zonasArray);\r\n        } else {\r\n          await loadSocio([]);\r\n        }\r\n      }\r\n    };\r\n    \r\n    initializeForm();\r\n  }, [isEdit, id]);\r\n\r\n  const loadInitialData = async () => {\r\n    try {\r\n      const zonasResult = await zonasService.getZonas();\r\n      \r\n      if (zonasResult.success) {\r\n        setZonas(Array.isArray(zonasResult.data) ? zonasResult.data : []);\r\n      } else {\r\n        setZonas([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cargando datos iniciales:', error);\r\n      setError('Error al cargar las zonas');\r\n      setZonas([]);\r\n    }\r\n  };\r\n\r\n  const loadSocio = async (zonasArray = zonas) => {\r\n    setInitialLoading(true);\r\n    try {\r\n      console.log('🔍 Cargando datos del personal con ID:', id);\r\n      console.log('🏢 Zonas disponibles al momento de cargar:', zonasArray.map(z => z.nombre));\r\n      \r\n      const result = await sociosService.getSocioById(id);\r\n      \r\n      if (result.success) {\r\n        const socio = result.data;\r\n        console.log('📋 Datos del personal cargados:', socio);\r\n        \r\n        // Cargar campos del formulario con logs para debug\r\n        setValue('dni', socio.dni || '');\r\n        setValue('nombres', socio.nombres || '');\r\n        setValue('apellidos', socio.apellidos || '');\r\n        setValue('celular', socio.celular || '');\r\n        setValue('direccion', socio.direccion || '');\r\n        \r\n        // Cargar fecha de juramentación\r\n        if (socio.fechaJuramentacion) {\r\n          const fecha = socio.fechaJuramentacion instanceof Date \r\n            ? socio.fechaJuramentacion \r\n            : socio.fechaJuramentacion.toDate ? socio.fechaJuramentacion.toDate() \r\n            : new Date(socio.fechaJuramentacion);\r\n          setValue('fechaJuramentacion', fecha);\r\n        }\r\n        \r\n        // Verificar y cargar zona con debug\r\n        const zonaValue = socio.zona || '';\r\n        console.log('🏢 Zona a cargar:', zonaValue);\r\n        setValue('zona', zonaValue);\r\n        \r\n        // Encontrar la zona correspondiente en la lista y seleccionarla\r\n        if (zonaValue && zonasArray.length > 0) {\r\n          const zonaObj = zonasArray.find(z => z.nombre === zonaValue);\r\n          console.log('🏢 Zona encontrada para seleccionar:', zonaObj);\r\n          setSelectedZona(zonaObj || null);\r\n          \r\n          if (!zonaObj) {\r\n            console.warn('⚠️ No se encontró la zona en la lista disponible');\r\n          }\r\n        } else {\r\n          setSelectedZona(null);\r\n          if (zonaValue) {\r\n            console.warn('⚠️ Zona requerida pero lista de zonas vacía');\r\n          }\r\n        }\r\n        \r\n        setSuccess('Datos del personal cargados correctamente');\r\n      } else {\r\n        console.error('❌ Error al cargar personal:', result.error);\r\n        setError('No se pudo cargar los datos del personal: ' + result.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error al cargar personal:', error);\r\n      setError('Error al cargar los datos del personal');\r\n    } finally {\r\n      setInitialLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddZona = async () => {\r\n    if (!newZonaName.trim()) return;\r\n    \r\n    setSavingZona(true);\r\n    try {\r\n      const zonaData = {\r\n        nombre: newZonaName.trim(),\r\n        descripcion: newZonaDescription.trim(),\r\n        activa: true\r\n      };\r\n      \r\n      const result = await zonasService.createZona(zonaData);\r\n      \r\n      if (result.success) {\r\n        // Recargar lista de zonas\r\n        await loadInitialData();\r\n        \r\n        // Crear objeto de zona para seleccionar\r\n        const nuevaZona = {\r\n          id: 'temp-' + Date.now(), // ID temporal\r\n          nombre: newZonaName.trim(),\r\n          descripcion: newZonaDescription.trim(),\r\n          activa: true\r\n        };\r\n        \r\n        // Seleccionar la nueva zona en el autocomplete\r\n        setSelectedZona(nuevaZona);\r\n        setValue('zona', newZonaName.trim());\r\n        \r\n        // Cerrar modal y limpiar\r\n        setShowAddZonaModal(false);\r\n        setNewZonaName('');\r\n        setNewZonaDescription('');\r\n        setSuccess('Nueva zona agregada exitosamente');\r\n      } else {\r\n        setError(result.error || 'Error al crear la zona');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al crear zona:', error);\r\n      setError('Error inesperado al crear la zona');\r\n    } finally {\r\n      setSavingZona(false);\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    setLoading(true);\r\n    setError('');\r\n    setSuccess('');\r\n\r\n    try {\r\n      let result;\r\n      \r\n      // Preparar datos para envío\r\n      const personalData = {\r\n        dni: data.dni.trim(),\r\n        nombres: data.nombres.trim(),\r\n        apellidos: data.apellidos.trim(),\r\n        celular: data.celular.trim(),\r\n        zona: data.zona,\r\n        direccion: data.direccion.trim(),\r\n        fechaJuramentacion: data.fechaJuramentacion,\r\n        // Campos adicionales para mantener compatibilidad\r\n        estado: 'activo',\r\n        fechaRegistro: new Date()\r\n      };\r\n\r\n      if (isEdit) {\r\n        result = await sociosService.updateSocio(id, personalData);\r\n      } else {\r\n        result = await sociosService.createSocio(personalData);\r\n      }\r\n\r\n      if (result.success) {\r\n        setSuccess(result.message);\r\n        setTimeout(() => {\r\n          navigate('/personal');\r\n        }, 1500);\r\n      } else {\r\n        setError(result.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al guardar personal:', error);\r\n      setError('Error inesperado al guardar los datos del personal');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (initialLoading) {\r\n    return (\r\n      <Container maxWidth=\"sm\">\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ mb: 3 }}>\r\n        <Button\r\n          startIcon={<ArrowBackIcon />}\r\n          onClick={() => navigate('/personal')}\r\n          sx={{ mb: 2 }}\r\n        >\r\n          Volver a la lista\r\n        </Button>\r\n        \r\n        <Typography variant=\"h4\" gutterBottom>\r\n          {isEdit ? 'Editar Personal' : 'Nuevo Personal'}\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          {isEdit ? 'Modifica los datos del personal' : 'Registra nuevo personal en el sistema'}\r\n        </Typography>\r\n      </Box>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError('')}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 3 }} onClose={() => setSuccess('')}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n\r\n      <Card>\r\n        <CardContent>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <Grid container spacing={2}>\r\n              {/* DNI y Celular */}\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"DNI *\"\r\n                  placeholder=\"Ej: 12345678\"\r\n                  {...register('dni')}\r\n                  error={!!errors.dni}\r\n                  helperText={errors.dni?.message}\r\n                  inputProps={{ maxLength: 8 }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Celular\"\r\n                  placeholder=\"Ej: 987654321\"\r\n                  {...register('celular')}\r\n                  error={!!errors.celular}\r\n                  helperText={errors.celular?.message}\r\n                  inputProps={{ maxLength: 9 }}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Nombres y Apellidos */}\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Nombres *\"\r\n                  placeholder=\"Ej: Juan Carlos\"\r\n                  {...register('nombres')}\r\n                  error={!!errors.nombres}\r\n                  helperText={errors.nombres?.message}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Apellidos *\"\r\n                  placeholder=\"Ej: García López\"\r\n                  {...register('apellidos')}\r\n                  error={!!errors.apellidos}\r\n                  helperText={errors.apellidos?.message}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Dirección */}\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Dirección *\"\r\n                  placeholder=\"Ej: Av. Lima 123, San Martín de Porres\"\r\n                  {...register('direccion')}\r\n                  error={!!errors.direccion}\r\n                  helperText={errors.direccion?.message}\r\n                  multiline\r\n                  rows={2}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Fecha de Juramentación y Zona */}\r\n              <Grid item xs={12} md={6}>\r\n                <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={es}>\r\n                  <DatePicker\r\n                    label=\"Fecha de Juramentación *\"\r\n                    value={fechaJuramentacion}\r\n                    sx={{  maxWidth: 200 }}\r\n                    onChange={(newValue) => {\r\n                      setValue('fechaJuramentacion', newValue);\r\n                    }}\r\n                    enableAccessibleFieldDOMStructure={false}\r\n                    slots={{\r\n                      textField: (params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          fullWidth\r\n                          error={!!errors.fechaJuramentacion}\r\n                          helperText={errors.fechaJuramentacion?.message}\r\n                        />\r\n                      ),\r\n                    }}\r\n                    format=\"dd/MM/yyyy\"\r\n                  />\r\n                </LocalizationProvider>\r\n              </Grid>\r\n              <Grid item xs={12} md={6}>\r\n                <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-start', width: '100%' }}>\r\n                  <Autocomplete\r\n                    fullWidth\r\n                    sx={{  minWidth: 120 }}\r\n                    options={zonas}\r\n                    value={selectedZona}\r\n                    getOptionLabel={(option) => option?.nombre || ''}\r\n                    renderOption={(props, option) => (\r\n                      <Box component=\"li\" {...props}>\r\n                        <Box>\r\n                          <Typography variant=\"body1\">{option.nombre}</Typography>\r\n                          {option.descripcion && (\r\n                            <Typography variant=\"caption\" color=\"text.secondary\">\r\n                              {option.descripcion}\r\n                            </Typography>\r\n                          )}\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"Zona *\"\r\n                        error={!!errors.zona}\r\n                        helperText={errors.zona?.message}\r\n                        placeholder=\"Buscar zona...\"\r\n                      />\r\n                    )}\r\n                    onChange={(event, value) => {\r\n                      setSelectedZona(value);\r\n                      setValue('zona', value ? value.nombre : '');\r\n                    }}\r\n                    noOptionsText=\"No se encontraron zonas\"\r\n                    isOptionEqualToValue={(option, value) => {\r\n                      if (!option || !value) return option === value;\r\n                      return option.nombre === value.nombre;\r\n                    }}\r\n                  />\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    onClick={() => setShowAddZonaModal(true)}\r\n                    sx={{ \r\n                      mt: 1,\r\n                      bgcolor: 'primary.light', \r\n                      '&:hover': { bgcolor: 'primary.main' },\r\n                      color: 'white'\r\n                    }}\r\n                  >\r\n                    <AddIcon />\r\n                  </IconButton>\r\n                </Box>\r\n              </Grid>\r\n\r\n              {/* Botones */}\r\n              <Grid item xs={12}>\r\n                <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end', flexWrap: 'wrap' }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    onClick={() => navigate('/personal')}\r\n                    disabled={loading}\r\n                  >\r\n                    Cancelar\r\n                  </Button>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    disabled={loading}\r\n                    startIcon={\r\n                      loading ? (\r\n                        <CircularProgress size={20} />\r\n                      ) : isEdit ? (\r\n                        <EditIcon />\r\n                      ) : (\r\n                        <PersonAddIcon />\r\n                      )\r\n                    }\r\n                  >\r\n                    {loading\r\n                      ? 'Guardando...'\r\n                      : isEdit\r\n                      ? 'Actualizar Personal'\r\n                      : 'Registrar Personal'\r\n                    }\r\n                  </Button>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Información adicional */}\r\n      <Paper sx={{ p: 3, mt: 3, bgcolor: 'grey.50' }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          ℹ️ Información Importante\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          • El DNI debe tener exactamente 8 dígitos<br/>\r\n          • El celular debe empezar con 9 y tener 9 dígitos en total<br/>\r\n          • Los nombres y apellidos solo pueden contener letras y espacios<br/>\r\n          • La dirección debe incluir calle y número<br/>\r\n          • La fecha de juramentación no puede ser futura<br/>\r\n          • Todos los campos marcados con (*) son obligatorios\r\n        </Typography>\r\n      </Paper>\r\n\r\n      {/* Modal para agregar nueva zona */}\r\n      <Dialog \r\n        open={showAddZonaModal} \r\n        onClose={() => {\r\n          setShowAddZonaModal(false);\r\n          setNewZonaName('');\r\n          setNewZonaDescription('');\r\n        }}\r\n        maxWidth=\"sm\" \r\n        fullWidth\r\n      >\r\n        <DialogTitle>Agregar Nueva Zona</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Nombre de la Zona *\"\r\n            value={newZonaName}\r\n            onChange={(e) => setNewZonaName(e.target.value)}\r\n            margin=\"normal\"\r\n            placeholder=\"Ej: Zona Norte\"\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            label=\"Descripción (opcional)\"\r\n            value={newZonaDescription}\r\n            onChange={(e) => setNewZonaDescription(e.target.value)}\r\n            margin=\"normal\"\r\n            multiline\r\n            rows={2}\r\n            placeholder=\"Ej: Comprende los distritos del norte de la ciudad\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button \r\n            onClick={() => {\r\n              setShowAddZonaModal(false);\r\n              setNewZonaName('');\r\n              setNewZonaDescription('');\r\n            }}\r\n            disabled={savingZona}\r\n          >\r\n            Cancelar\r\n          </Button>\r\n          <Button \r\n            onClick={handleAddZona}\r\n            variant=\"contained\"\r\n            disabled={!newZonaName.trim() || savingZona}\r\n            startIcon={savingZona ? <CircularProgress size={20} /> : <AddIcon />}\r\n          >\r\n            {savingZona ? 'Guardando...' : 'Agregar Zona'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default SocioForm;","import {\r\n  collection,\r\n  doc,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  limit,\r\n  startAfter,\r\n  serverTimestamp,\r\n  writeBatch\r\n} from 'firebase/firestore';\r\nimport { db, auth } from './firebase';\r\n\r\nclass SociosService {\r\n  constructor() {\r\n    this.collectionName = 'personal';\r\n  }\r\n\r\n  async createSocio(socioData) {\r\n    try {\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) {\r\n        throw new Error('Usuario no autenticado');\r\n      }\r\n\r\n      const socio = {\r\n        ...socioData,\r\n        estado: socioData.estado || 'activo',\r\n        fechaRegistro: socioData.fechaRegistro || serverTimestamp(),\r\n        fechaCreacion: serverTimestamp(),\r\n        fechaModificacion: serverTimestamp(),\r\n        creadoPor: currentUser.uid\r\n      };\r\n\r\n      const docRef = await addDoc(collection(db, this.collectionName), socio);\r\n      \r\n      return {\r\n        success: true,\r\n        id: docRef.id,\r\n        message: 'Personal creado exitosamente'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error al crear socio:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async getSocios(options = {}) {\r\n    try {\r\n      const {\r\n        pageSize = 100, // Aumentamos para filtrar del lado cliente\r\n        searchTerm = '',\r\n        zona = '',\r\n        campana = '',\r\n        estado = ''\r\n      } = options;\r\n\r\n      console.log('🔍 Buscando personal con filtros:', { searchTerm, zona, campana, estado });\r\n\r\n      // Query simple sin índices complejos\r\n      let q = collection(db, this.collectionName);\r\n      \r\n      // Solo ordenar por fecha de creación (sin filtros server-side por ahora)\r\n      q = query(q, orderBy('fechaCreacion', 'desc'), limit(pageSize));\r\n\r\n      const snapshot = await getDocs(q);\r\n      let socios = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n\r\n      console.log('📊 Total documentos obtenidos:', socios.length);\r\n\r\n      // FILTROS DEL LADO CLIENTE (temporal hasta crear índices)\r\n      if (zona && zona !== '') {\r\n        socios = socios.filter(socio => socio.zona === zona);\r\n        console.log('🏢 Filtrados por zona:', socios.length);\r\n      } else if (zona === '') {\r\n        console.log('🏢 Mostrando todas las zonas');\r\n      }\r\n\r\n      if (campana) {\r\n        socios = socios.filter(socio => socio.campana === campana);\r\n        console.log('📢 Filtrados por campaña:', socios.length);\r\n      }\r\n\r\n      if (estado) {\r\n        socios = socios.filter(socio => socio.estado === estado);\r\n        console.log('📊 Filtrados por estado:', socios.length);\r\n      }\r\n\r\n      // Filtro de búsqueda por texto\r\n      if (searchTerm) {\r\n        const term = searchTerm.toLowerCase();\r\n        socios = socios.filter(socio =>\r\n          (socio.nombres || '').toLowerCase().includes(term) ||\r\n          (socio.apellidos || '').toLowerCase().includes(term) ||\r\n          (socio.celular || '').includes(term) ||\r\n          (socio.dni || '').includes(term)\r\n        );\r\n        console.log('🔍 Filtrados por búsqueda:', socios.length);\r\n      }\r\n\r\n      console.log('✅ Personal encontrado:', socios.length);\r\n\r\n      return {\r\n        success: true,\r\n        data: socios,\r\n        total: socios.length\r\n      };\r\n    } catch (error) {\r\n      console.error('❌ Error al obtener personal:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async getSocioById(id) {\r\n    try {\r\n      const docSnap = await getDoc(doc(db, this.collectionName, id));\r\n      \r\n      if (docSnap.exists()) {\r\n        return {\r\n          success: true,\r\n          data: {\r\n            id: docSnap.id,\r\n            ...docSnap.data()\r\n          }\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: 'Personal no encontrado'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener personal:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async updateSocio(id, updates) {\r\n    try {\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) {\r\n        throw new Error('Usuario no autenticado');\r\n      }\r\n\r\n      const updateData = {\r\n        ...updates,\r\n        fechaModificacion: serverTimestamp(),\r\n        modificadoPor: currentUser.uid\r\n      };\r\n\r\n      await updateDoc(doc(db, this.collectionName, id), updateData);\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Personal actualizado exitosamente'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error al actualizar personal:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async deleteSocio(id) {\r\n    try {\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) {\r\n        throw new Error('Usuario no autenticado');\r\n      }\r\n\r\n      await deleteDoc(doc(db, this.collectionName, id));\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Personal eliminado exitosamente'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error al eliminar personal:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async getStats() {\r\n    try {\r\n      const snapshot = await getDocs(collection(db, this.collectionName));\r\n      const socios = snapshot.docs.map(doc => doc.data());\r\n\r\n      const total = socios.length;\r\n      const activos = socios.filter(s => s.estado === 'activo').length;\r\n      \r\n      // Socios del mes actual\r\n      const startOfMonth = new Date();\r\n      startOfMonth.setDate(1);\r\n      startOfMonth.setHours(0, 0, 0, 0);\r\n      \r\n      const nuevosMes = socios.filter(s => {\r\n        const fechaCreacion = s.fechaCreacion?.toDate?.() || new Date(s.fechaCreacion);\r\n        return fechaCreacion >= startOfMonth;\r\n      }).length;\r\n\r\n      // Estadísticas por zona\r\n      const zonaStats = {};\r\n      socios.forEach(socio => {\r\n        if (socio.zona) {\r\n          zonaStats[socio.zona] = (zonaStats[socio.zona] || 0) + 1;\r\n        }\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          total,\r\n          activos,\r\n          inactivos: total - activos,\r\n          nuevosMes,\r\n          zonaStats\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error al obtener estadísticas:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async bulkDelete(ids) {\r\n    try {\r\n      const batch = writeBatch(db);\r\n      \r\n      ids.forEach(id => {\r\n        const docRef = doc(db, this.collectionName, id);\r\n        batch.delete(docRef);\r\n      });\r\n\r\n      await batch.commit();\r\n\r\n      return {\r\n        success: true,\r\n        message: `${ids.length} socios eliminados exitosamente`\r\n      };\r\n    } catch (error) {\r\n      console.error('Error en eliminación masiva:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async updateEstado(id, nuevoEstado) {\r\n    return this.updateSocio(id, { estado: nuevoEstado });\r\n  }\r\n\r\n  getErrorMessage(error) {\r\n    const errorMessages = {\r\n      'permission-denied': 'No tienes permisos para realizar esta operación',\r\n      'not-found': 'El socio no fue encontrado',\r\n      'unavailable': 'Servicio no disponible. Por favor, intenta más tarde',\r\n      'failed-precondition': 'Error en la operación. Verifica los datos',\r\n      'invalid-argument': 'Datos inválidos proporcionados'\r\n    };\r\n\r\n    if (error.code && errorMessages[error.code]) {\r\n      return errorMessages[error.code];\r\n    }\r\n\r\n    return error.message || 'Ha ocurrido un error inesperado';\r\n  }\r\n}\r\n\r\nexport default new SociosService();","import {\r\n  collection,\r\n  doc,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  serverTimestamp\r\n} from 'firebase/firestore';\r\nimport { db, auth } from './firebase';\r\n\r\nclass ZonasService {\r\n  constructor() {\r\n    this.collectionName = 'zonas';\r\n  }\r\n\r\n  async createZona(zonaData) {\r\n    try {\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) {\r\n        throw new Error('Usuario no autenticado');\r\n      }\r\n\r\n      const zona = {\r\n        ...zonaData,\r\n        activa: zonaData.activa !== undefined ? zonaData.activa : true,\r\n        fechaCreacion: serverTimestamp(),\r\n        fechaModificacion: serverTimestamp(),\r\n        creadoPor: currentUser.uid\r\n      };\r\n\r\n      const docRef = await addDoc(collection(db, this.collectionName), zona);\r\n      \r\n      return {\r\n        success: true,\r\n        id: docRef.id,\r\n        data: { id: docRef.id, ...zona },\r\n        message: 'Zona creada exitosamente'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al crear zona'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getZonas() {\r\n    try {\r\n      const q = query(\r\n        collection(db, this.collectionName),\r\n        orderBy('nombre', 'asc')\r\n      );\r\n      \r\n      const snapshot = await getDocs(q);\r\n      const zonas = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n\r\n      return {\r\n        success: true,\r\n        data: zonas\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al obtener zonas'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getZonasActivas() {\r\n    try {\r\n      const q = query(\r\n        collection(db, this.collectionName),\r\n        where('activa', '==', true),\r\n        orderBy('nombre', 'asc')\r\n      );\r\n      \r\n      const snapshot = await getDocs(q);\r\n      const zonas = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n\r\n      return {\r\n        success: true,\r\n        data: zonas\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al obtener zonas activas'\r\n      };\r\n    }\r\n  }\r\n\r\n  async updateZona(id, updates) {\r\n    try {\r\n      await updateDoc(doc(db, this.collectionName, id), {\r\n        ...updates,\r\n        fechaModificacion: serverTimestamp()\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Zona actualizada exitosamente'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al actualizar zona'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getZonaById(id) {\r\n    try {\r\n      const docSnap = await getDoc(doc(db, this.collectionName, id));\r\n      \r\n      if (docSnap.exists()) {\r\n        return {\r\n          success: true,\r\n          data: {\r\n            id: docSnap.id,\r\n            ...docSnap.data()\r\n          }\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: 'Zona no encontrada'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al obtener zona'\r\n      };\r\n    }\r\n  }\r\n\r\n  async deleteZona(id) {\r\n    try {\r\n      // Primero obtener el nombre de la zona para verificar socios\r\n      const zonaDoc = await getDoc(doc(db, this.collectionName, id));\r\n      if (!zonaDoc.exists()) {\r\n        return {\r\n          success: false,\r\n          error: 'Zona no encontrada'\r\n        };\r\n      }\r\n\r\n      const zonaNombre = zonaDoc.data().nombre;\r\n\r\n      // Verificar si hay personal usando esta zona (por nombre, no por ID)\r\n      const personalSnapshot = await getDocs(\r\n        query(collection(db, 'personal'), where('zona', '==', zonaNombre))\r\n      );\r\n\r\n      if (!personalSnapshot.empty) {\r\n        return {\r\n          success: false,\r\n          error: `No se puede eliminar la zona \"${zonaNombre}\" porque tiene ${personalSnapshot.size} personal(es) asociado(s)`\r\n        };\r\n      }\r\n\r\n      await deleteDoc(doc(db, this.collectionName, id));\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Zona eliminada exitosamente'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al eliminar zona'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getStats() {\r\n    try {\r\n      const zonasSnapshot = await getDocs(collection(db, this.collectionName));\r\n      const personalSnapshot = await getDocs(collection(db, 'Personal'));\r\n\r\n      const zonas = zonasSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      const personal = personalSnapshot.docs.map(doc => doc.data());\r\n\r\n      const total = zonas.length;\r\n      const activas = zonas.filter(z => z.activa).length;\r\n\r\n      // Contar personal por zona\r\n      const personalPorZona = {};\r\n      personal.forEach(p => {\r\n        if (p.zona) {\r\n          personalPorZona[p.zona] = (personalPorZona[p.zona] || 0) + 1;\r\n        }\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          total,\r\n          activas,\r\n          inactivas: total - activas,\r\n          personalPorZona\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al obtener estadísticas'\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new ZonasService();","import * as yup from 'yup';\r\n\r\nexport const loginSchema = yup.object({\r\n  email: yup\r\n    .string()\r\n    .email('Correo electrónico inválido')\r\n    .required('El correo electrónico es requerido'),\r\n  password: yup\r\n    .string()\r\n    .min(6, 'La contraseña debe tener al menos 6 caracteres')\r\n    .required('La contraseña es requerida')\r\n});\r\n\r\nexport const registerSchema = yup.object({\r\n  displayName: yup\r\n    .string()\r\n    .min(3, 'El nombre debe tener al menos 3 caracteres')\r\n    .max(50, 'El nombre no puede tener más de 50 caracteres')\r\n    .required('El nombre es requerido'),\r\n  email: yup\r\n    .string()\r\n    .email('Correo electrónico inválido')\r\n    .required('El correo electrónico es requerido'),\r\n  password: yup\r\n    .string()\r\n    .min(6, 'La contraseña debe tener al menos 6 caracteres')\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\r\n      'La contraseña debe contener al menos una mayúscula, una minúscula y un número'\r\n    )\r\n    .required('La contraseña es requerida'),\r\n  confirmPassword: yup\r\n    .string()\r\n    .oneOf([yup.ref('password'), null], 'Las contraseñas no coinciden')\r\n    .required('Confirme su contraseña')\r\n});\r\n\r\nexport const resetPasswordSchema = yup.object({\r\n  email: yup\r\n    .string()\r\n    .email('Correo electrónico inválido')\r\n    .required('El correo electrónico es requerido')\r\n});\r\n\r\nexport const changePasswordSchema = yup.object({\r\n  currentPassword: yup\r\n    .string()\r\n    .required('La contraseña actual es requerida'),\r\n  newPassword: yup\r\n    .string()\r\n    .min(6, 'La nueva contraseña debe tener al menos 6 caracteres')\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\r\n      'La contraseña debe contener al menos una mayúscula, una minúscula y un número'\r\n    )\r\n    .required('La nueva contraseña es requerida'),\r\n  confirmNewPassword: yup\r\n    .string()\r\n    .oneOf([yup.ref('newPassword'), null], 'Las contraseñas no coinciden')\r\n    .required('Confirme su nueva contraseña')\r\n});\r\n\r\n// Validaciones para personal (anteriormente socios)\r\nexport const socioSchema = yup.object({\r\n  dni: yup\r\n    .string()\r\n    .matches(/^\\d{8}$/, 'El DNI debe tener exactamente 8 dígitos')\r\n    .required('El DNI es requerido'),\r\n  nombres: yup\r\n    .string()\r\n    .min(2, 'Los nombres deben tener al menos 2 caracteres')\r\n    .max(50, 'Los nombres no pueden tener más de 50 caracteres')\r\n    .matches(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/, 'Los nombres solo pueden contener letras')\r\n    .required('Los nombres son requeridos'),\r\n  apellidos: yup\r\n    .string()\r\n    .min(2, 'Los apellidos deben tener al menos 2 caracteres')\r\n    .max(50, 'Los apellidos no pueden tener más de 50 caracteres')\r\n    .matches(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/, 'Los apellidos solo pueden contener letras')\r\n    .required('Los apellidos son requeridos'),\r\n  celular: yup\r\n    .string()\r\n    .matches(/^9\\d{8}$/, 'El celular debe empezar con 9 y tener 9 dígitos')\r\n    .required('El celular es requerido'),\r\n  zona: yup\r\n    .string()\r\n    .required('La zona es requerida'),\r\n  direccion: yup\r\n    .string()\r\n    .min(5, 'La dirección debe tener al menos 5 caracteres')\r\n    .max(100, 'La dirección no puede tener más de 100 caracteres')\r\n    .required('La dirección es requerida'),\r\n  fechaJuramentacion: yup\r\n    .date()\r\n    .max(new Date(), 'La fecha de juramentación no puede ser futura')\r\n    .required('La fecha de juramentación es requerida')\r\n});\r\n\r\n// Validaciones para zonas\r\nexport const zonaSchema = yup.object({\r\n  nombre: yup\r\n    .string()\r\n    .min(3, 'El nombre debe tener al menos 3 caracteres')\r\n    .max(50, 'El nombre no puede tener más de 50 caracteres')\r\n    .required('El nombre es requerido'),\r\n  descripcion: yup\r\n    .string()\r\n    .max(200, 'La descripción no puede tener más de 200 caracteres')\r\n    .optional()\r\n});\r\n\r\n// Validaciones para campañas\r\nexport const campanaSchema = yup.object({\r\n  nombre: yup\r\n    .string()\r\n    .min(3, 'El nombre debe tener al menos 3 caracteres')\r\n    .max(100, 'El nombre no puede tener más de 100 caracteres')\r\n    .required('El nombre es requerido'),\r\n  descripcion: yup\r\n    .string()\r\n    .max(500, 'La descripción no puede tener más de 500 caracteres')\r\n    .optional(),\r\n  fechaInicio: yup\r\n    .date()\r\n    .required('La fecha de inicio es requerida'),\r\n  fechaFin: yup\r\n    .date()\r\n    .min(yup.ref('fechaInicio'), 'La fecha de fin debe ser posterior a la de inicio')\r\n    .required('La fecha de fin es requerida'),\r\n  activa: yup\r\n    .boolean()\r\n    .required('El estado es requerido')\r\n});"],"names":["_errors$dni","_errors$celular","_errors$nombres","_errors$apellidos","_errors$direccion","navigate","useNavigate","id","useParams","isEdit","Boolean","loading","setLoading","useState","initialLoading","setInitialLoading","zonas","setZonas","error","setError","success","setSuccess","showAddZonaModal","setShowAddZonaModal","newZonaName","setNewZonaName","newZonaDescription","setNewZonaDescription","savingZona","setSavingZona","selectedZona","setSelectedZona","register","handleSubmit","formState","errors","reset","setValue","watch","useForm","resolver","yupResolver","socioSchema","defaultValues","dni","nombres","apellidos","celular","zona","direccion","fechaJuramentacion","useEffect","async","console","log","loadInitialData","zonasResult","zonasService","getZonas","zonasArray","Array","isArray","data","map","z","nombre","loadSocio","initializeForm","arguments","length","undefined","result","sociosService","getSocioById","socio","fecha","Date","toDate","zonaValue","zonaObj","find","warn","_jsx","Container","maxWidth","children","Box","sx","display","justifyContent","mt","CircularProgress","_jsxs","mb","Button","startIcon","ArrowBackIcon","onClick","Typography","variant","gutterBottom","color","Alert","severity","onClose","Card","CardContent","onSubmit","personalData","trim","estado","fechaRegistro","updateSocio","createSocio","message","setTimeout","Grid","container","spacing","item","xs","md","TextField","fullWidth","label","placeholder","helperText","inputProps","maxLength","multiline","rows","LocalizationProvider","dateAdapter","AdapterDateFns","adapterLocale","es","DatePicker","value","onChange","newValue","enableAccessibleFieldDOMStructure","slots","textField","params","_errors$fechaJurament","format","gap","alignItems","width","Autocomplete","minWidth","options","getOptionLabel","option","renderOption","props","component","descripcion","renderInput","_errors$zona","event","noOptionsText","isOptionEqualToValue","IconButton","bgcolor","AddIcon","flexWrap","disabled","type","size","EditIcon","PersonAddIcon","Paper","p","Dialog","open","DialogTitle","DialogContent","e","target","margin","DialogActions","zonaData","activa","createZona","nuevaZona","now","constructor","this","collectionName","socioData","currentUser","auth","Error","serverTimestamp","fechaCreacion","fechaModificacion","creadoPor","uid","addDoc","collection","db","getErrorMessage","getSocios","pageSize","searchTerm","campana","q","query","orderBy","limit","socios","getDocs","docs","doc","filter","term","toLowerCase","includes","total","docSnap","getDoc","exists","updates","updateData","modificadoPor","updateDoc","deleteSocio","deleteDoc","getStats","activos","s","startOfMonth","setDate","setHours","nuevosMes","_s$fechaCreacion","_s$fechaCreacion$toDa","call","zonaStats","forEach","inactivos","bulkDelete","ids","batch","writeBatch","docRef","delete","commit","updateEstado","nuevoEstado","errorMessages","code","snapshot","getZonasActivas","where","updateZona","getZonaById","deleteZona","zonaDoc","zonaNombre","personalSnapshot","empty","zonasSnapshot","personal","activas","personalPorZona","inactivas","loginSchema","yup","email","required","password","min","displayName","max","matches","confirmPassword","oneOf","currentPassword","newPassword","confirmNewPassword","zonaSchema","optional","fechaInicio","fechaFin"],"sourceRoot":""}