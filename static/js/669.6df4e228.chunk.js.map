{"version":3,"file":"static/js/669.6df4e228.chunk.js","mappings":"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","sources":["pages/socios/SocioForm.js","services/socios.service.js","services/zonas.service.js","utils/validators.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport {\n  Container,\n  Paper,\n  Typography,\n  Box,\n  TextField,\n  Button,\n  Grid,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormHelperText,\n  Alert,\n  CircularProgress,\n  Card,\n  CardContent,\n  Autocomplete,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions\n} from '@mui/material';\nimport {\n  ArrowBack as ArrowBackIcon,\n  Save as SaveIcon,\n  PersonAdd as PersonAddIcon,\n  Edit as EditIcon,\n  Add as AddIcon\n} from '@mui/icons-material';\nimport { socioSchema } from '../../utils/validators';\nimport sociosService from '../../services/socios.service';\nimport zonasService from '../../services/zonas.service';\n\nfunction SocioForm() {\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const isEdit = Boolean(id);\n\n  const [loading, setLoading] = useState(false);\n  const [initialLoading, setInitialLoading] = useState(isEdit);\n  const [zonas, setZonas] = useState([]);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  \n  // Modal para agregar nueva zona\n  const [showAddZonaModal, setShowAddZonaModal] = useState(false);\n  const [newZonaName, setNewZonaName] = useState('');\n  const [newZonaDescription, setNewZonaDescription] = useState('');\n  const [savingZona, setSavingZona] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    setValue\n  } = useForm({\n    resolver: yupResolver(socioSchema),\n    defaultValues: {\n      dni: '',\n      nombres: '',\n      apellidos: '',\n      celular: '',\n      zona: ''\n    }\n  });\n\n  useEffect(() => {\n    loadInitialData();\n    if (isEdit) {\n      loadSocio();\n    }\n  }, [isEdit, id]);\n\n  const loadInitialData = async () => {\n    try {\n      const zonasResult = await zonasService.getZonas();\n      \n      if (zonasResult.success) {\n        setZonas(Array.isArray(zonasResult.data) ? zonasResult.data : []);\n      } else {\n        setZonas([]);\n      }\n    } catch (error) {\n      console.error('Error cargando datos iniciales:', error);\n      setError('Error al cargar las zonas');\n      setZonas([]);\n    }\n  };\n\n  const loadSocio = async () => {\n    setInitialLoading(true);\n    try {\n      const result = await sociosService.getSocioById(id);\n      \n      if (result.success) {\n        const socio = result.data;\n        // Cargar solo los campos del formulario simplificado\n        setValue('dni', socio.dni || '');\n        setValue('nombres', socio.nombres || '');\n        setValue('apellidos', socio.apellidos || '');\n        setValue('celular', socio.celular || '');\n        setValue('zona', socio.zona || '');\n      } else {\n        setError('No se pudo cargar los datos del personal');\n      }\n    } catch (error) {\n      console.error('Error al cargar personal:', error);\n      setError('Error al cargar los datos del personal');\n    } finally {\n      setInitialLoading(false);\n    }\n  };\n\n  const handleAddZona = async () => {\n    if (!newZonaName.trim()) return;\n    \n    setSavingZona(true);\n    try {\n      const zonaData = {\n        nombre: newZonaName.trim(),\n        descripcion: newZonaDescription.trim(),\n        activa: true\n      };\n      \n      const result = await zonasService.createZona(zonaData);\n      \n      if (result.success) {\n        // Recargar lista de zonas\n        await loadInitialData();\n        // Seleccionar la nueva zona\n        setValue('zona', newZonaName.trim());\n        // Cerrar modal y limpiar\n        setShowAddZonaModal(false);\n        setNewZonaName('');\n        setNewZonaDescription('');\n        setSuccess('Nueva zona agregada exitosamente');\n      } else {\n        setError(result.error || 'Error al crear la zona');\n      }\n    } catch (error) {\n      console.error('Error al crear zona:', error);\n      setError('Error inesperado al crear la zona');\n    } finally {\n      setSavingZona(false);\n    }\n  };\n\n  const onSubmit = async (data) => {\n    setLoading(true);\n    setError('');\n    setSuccess('');\n\n    try {\n      let result;\n      \n      // Preparar datos para envío\n      const personalData = {\n        dni: data.dni.trim(),\n        nombres: data.nombres.trim(),\n        apellidos: data.apellidos.trim(),\n        celular: data.celular.trim(),\n        zona: data.zona,\n        // Campos adicionales para mantener compatibilidad\n        estado: 'activo',\n        fechaRegistro: new Date()\n      };\n\n      if (isEdit) {\n        result = await sociosService.updateSocio(id, personalData);\n      } else {\n        result = await sociosService.createSocio(personalData);\n      }\n\n      if (result.success) {\n        setSuccess(result.message);\n        setTimeout(() => {\n          navigate('/personal');\n        }, 1500);\n      } else {\n        setError(result.error);\n      }\n    } catch (error) {\n      console.error('Error al guardar personal:', error);\n      setError('Error inesperado al guardar los datos del personal');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (initialLoading) {\n    return (\n      <Container maxWidth=\"sm\">\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\n          <CircularProgress />\n        </Box>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box sx={{ mb: 3 }}>\n        <Button\n          startIcon={<ArrowBackIcon />}\n          onClick={() => navigate('/personal')}\n          sx={{ mb: 2 }}\n        >\n          Volver a la lista\n        </Button>\n        \n        <Typography variant=\"h4\" gutterBottom>\n          {isEdit ? 'Editar Personal' : 'Nuevo Personal'}\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          {isEdit ? 'Modifica los datos del personal' : 'Registra nuevo personal en el sistema'}\n        </Typography>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError('')}>\n          {error}\n        </Alert>\n      )}\n\n      {success && (\n        <Alert severity=\"success\" sx={{ mb: 3 }} onClose={() => setSuccess('')}>\n          {success}\n        </Alert>\n      )}\n\n      <Card>\n        <CardContent>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <Grid container spacing={3}>\n              {/* DNI */}\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"DNI *\"\n                  placeholder=\"Ej: 12345678\"\n                  {...register('dni')}\n                  error={!!errors.dni}\n                  helperText={errors.dni?.message}\n                  inputProps={{ maxLength: 8 }}\n                />\n              </Grid>\n\n              {/* Celular */}\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Celular *\"\n                  placeholder=\"Ej: 987654321\"\n                  {...register('celular')}\n                  error={!!errors.celular}\n                  helperText={errors.celular?.message}\n                  inputProps={{ maxLength: 9 }}\n                />\n              </Grid>\n\n              {/* Nombres */}\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Nombres *\"\n                  placeholder=\"Ej: Juan Carlos\"\n                  {...register('nombres')}\n                  error={!!errors.nombres}\n                  helperText={errors.nombres?.message}\n                />\n              </Grid>\n\n              {/* Apellidos */}\n              <Grid item xs={12} md={6}>\n                <TextField\n                  fullWidth\n                  label=\"Apellidos *\"\n                  placeholder=\"Ej: García López\"\n                  {...register('apellidos')}\n                  error={!!errors.apellidos}\n                  helperText={errors.apellidos?.message}\n                />\n              </Grid>\n\n              {/* Zona */}\n              <Grid item xs={12}>\n                <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-start' }}>\n                  <Autocomplete\n                    fullWidth\n                    options={zonas}\n                    getOptionLabel={(option) => option.nombre || ''}\n                    renderOption={(props, option) => (\n                      <Box component=\"li\" {...props}>\n                        <Box>\n                          <Typography variant=\"body1\">{option.nombre}</Typography>\n                          {option.descripcion && (\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {option.descripcion}\n                            </Typography>\n                          )}\n                        </Box>\n                      </Box>\n                    )}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"Zona *\"\n                        error={!!errors.zona}\n                        helperText={errors.zona?.message}\n                        placeholder=\"Buscar zona...\"\n                      />\n                    )}\n                    onChange={(event, value) => {\n                      setValue('zona', value ? value.nombre : '');\n                    }}\n                    noOptionsText=\"No se encontraron zonas\"\n                    isOptionEqualToValue={(option, value) => option.nombre === value.nombre}\n                  />\n                  \n                  <IconButton\n                    color=\"primary\"\n                    onClick={() => setShowAddZonaModal(true)}\n                    sx={{ \n                      mt: 1,\n                      bgcolor: 'primary.light', \n                      '&:hover': { bgcolor: 'primary.main' },\n                      color: 'white'\n                    }}\n                  >\n                    <AddIcon />\n                  </IconButton>\n                </Box>\n              </Grid>\n\n              {/* Botones */}\n              <Grid item xs={12}>\n                <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\n                  <Button\n                    variant=\"outlined\"\n                    onClick={() => navigate('/personal')}\n                    disabled={loading}\n                  >\n                    Cancelar\n                  </Button>\n                  \n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    disabled={loading}\n                    startIcon={\n                      loading ? (\n                        <CircularProgress size={20} />\n                      ) : isEdit ? (\n                        <EditIcon />\n                      ) : (\n                        <PersonAddIcon />\n                      )\n                    }\n                  >\n                    {loading\n                      ? 'Guardando...'\n                      : isEdit\n                      ? 'Actualizar Personal'\n                      : 'Registrar Personal'\n                    }\n                  </Button>\n                </Box>\n              </Grid>\n            </Grid>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Información adicional */}\n      <Paper sx={{ p: 3, mt: 3, bgcolor: 'grey.50' }}>\n        <Typography variant=\"h6\" gutterBottom>\n          ℹ️ Información Importante\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          • El DNI debe tener exactamente 8 dígitos<br/>\n          • El celular debe empezar con 9 y tener 9 dígitos en total<br/>\n          • Los nombres y apellidos solo pueden contener letras y espacios<br/>\n          • Todos los campos marcados con (*) son obligatorios\n        </Typography>\n      </Paper>\n\n      {/* Modal para agregar nueva zona */}\n      <Dialog \n        open={showAddZonaModal} \n        onClose={() => {\n          setShowAddZonaModal(false);\n          setNewZonaName('');\n          setNewZonaDescription('');\n        }}\n        maxWidth=\"sm\" \n        fullWidth\n      >\n        <DialogTitle>Agregar Nueva Zona</DialogTitle>\n        <DialogContent>\n          <TextField\n            fullWidth\n            label=\"Nombre de la Zona *\"\n            value={newZonaName}\n            onChange={(e) => setNewZonaName(e.target.value)}\n            margin=\"normal\"\n            placeholder=\"Ej: Zona Norte\"\n          />\n          <TextField\n            fullWidth\n            label=\"Descripción (opcional)\"\n            value={newZonaDescription}\n            onChange={(e) => setNewZonaDescription(e.target.value)}\n            margin=\"normal\"\n            multiline\n            rows={2}\n            placeholder=\"Ej: Comprende los distritos del norte de la ciudad\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={() => {\n              setShowAddZonaModal(false);\n              setNewZonaName('');\n              setNewZonaDescription('');\n            }}\n            disabled={savingZona}\n          >\n            Cancelar\n          </Button>\n          <Button \n            onClick={handleAddZona}\n            variant=\"contained\"\n            disabled={!newZonaName.trim() || savingZona}\n            startIcon={savingZona ? <CircularProgress size={20} /> : <AddIcon />}\n          >\n            {savingZona ? 'Guardando...' : 'Agregar Zona'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Container>\n  );\n}\n\nexport default SocioForm;","import {\n  collection,\n  doc,\n  addDoc,\n  getDocs,\n  getDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit,\n  startAfter,\n  serverTimestamp,\n  writeBatch\n} from 'firebase/firestore';\nimport { db, auth } from './firebase';\n\nclass SociosService {\n  constructor() {\n    this.collectionName = 'socios';\n  }\n\n  async createSocio(socioData) {\n    try {\n      const currentUser = auth.currentUser;\n      if (!currentUser) {\n        throw new Error('Usuario no autenticado');\n      }\n\n      const socio = {\n        ...socioData,\n        estado: socioData.estado || 'activo',\n        fechaRegistro: socioData.fechaRegistro || serverTimestamp(),\n        fechaCreacion: serverTimestamp(),\n        fechaModificacion: serverTimestamp(),\n        creadoPor: currentUser.uid\n      };\n\n      const docRef = await addDoc(collection(db, this.collectionName), socio);\n      \n      return {\n        success: true,\n        id: docRef.id,\n        message: 'Socio creado exitosamente'\n      };\n    } catch (error) {\n      console.error('Error al crear socio:', error);\n      return {\n        success: false,\n        error: this.getErrorMessage(error)\n      };\n    }\n  }\n\n  async getSocios(options = {}) {\n    try {\n      const {\n        pageSize = 10,\n        lastDoc = null,\n        searchTerm = '',\n        zona = '',\n        campana = '',\n        estado = '',\n        orderField = 'fechaCreacion',\n        orderDirection = 'desc'\n      } = options;\n\n      let q = collection(db, this.collectionName);\n      const conditions = [];\n\n      // Filtros\n      if (zona) conditions.push(where('zona', '==', zona));\n      if (campana) conditions.push(where('campana', '==', campana));\n      if (estado) conditions.push(where('estado', '==', estado));\n\n      // Aplicar condiciones\n      if (conditions.length > 0) {\n        q = query(q, ...conditions);\n      }\n\n      // Ordenamiento\n      q = query(q, orderBy(orderField, orderDirection));\n\n      // Paginación\n      if (lastDoc) {\n        q = query(q, startAfter(lastDoc));\n      }\n      q = query(q, limit(pageSize));\n\n      const snapshot = await getDocs(q);\n      const socios = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n\n      // Filtro de búsqueda por texto (lado cliente)\n      let filteredSocios = socios;\n      if (searchTerm) {\n        const term = searchTerm.toLowerCase();\n        filteredSocios = socios.filter(socio =>\n          (socio.nombres || '').toLowerCase().includes(term) ||\n          (socio.apellidos || '').toLowerCase().includes(term) ||\n          (socio.celular || '').includes(term)\n        );\n      }\n\n      return {\n        success: true,\n        data: filteredSocios,\n        lastDoc: snapshot.docs[snapshot.docs.length - 1] || null,\n        hasMore: snapshot.docs.length === pageSize\n      };\n    } catch (error) {\n      console.error('Error al obtener socios:', error);\n      return {\n        success: false,\n        error: this.getErrorMessage(error)\n      };\n    }\n  }\n\n  async getSocioById(id) {\n    try {\n      const docSnap = await getDoc(doc(db, this.collectionName, id));\n      \n      if (docSnap.exists()) {\n        return {\n          success: true,\n          data: {\n            id: docSnap.id,\n            ...docSnap.data()\n          }\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Socio no encontrado'\n        };\n      }\n    } catch (error) {\n      console.error('Error al obtener socio:', error);\n      return {\n        success: false,\n        error: this.getErrorMessage(error)\n      };\n    }\n  }\n\n  async updateSocio(id, updates) {\n    try {\n      const currentUser = auth.currentUser;\n      if (!currentUser) {\n        throw new Error('Usuario no autenticado');\n      }\n\n      const updateData = {\n        ...updates,\n        fechaModificacion: serverTimestamp(),\n        modificadoPor: currentUser.uid\n      };\n\n      await updateDoc(doc(db, this.collectionName, id), updateData);\n\n      return {\n        success: true,\n        message: 'Socio actualizado exitosamente'\n      };\n    } catch (error) {\n      console.error('Error al actualizar socio:', error);\n      return {\n        success: false,\n        error: this.getErrorMessage(error)\n      };\n    }\n  }\n\n  async deleteSocio(id) {\n    try {\n      const currentUser = auth.currentUser;\n      if (!currentUser) {\n        throw new Error('Usuario no autenticado');\n      }\n\n      await deleteDoc(doc(db, this.collectionName, id));\n\n      return {\n        success: true,\n        message: 'Socio eliminado exitosamente'\n      };\n    } catch (error) {\n      console.error('Error al eliminar socio:', error);\n      return {\n        success: false,\n        error: this.getErrorMessage(error)\n      };\n    }\n  }\n\n  async getStats() {\n    try {\n      const snapshot = await getDocs(collection(db, this.collectionName));\n      const socios = snapshot.docs.map(doc => doc.data());\n\n      const total = socios.length;\n      const activos = socios.filter(s => s.estado === 'activo').length;\n      \n      // Socios del mes actual\n      const startOfMonth = new Date();\n      startOfMonth.setDate(1);\n      startOfMonth.setHours(0, 0, 0, 0);\n      \n      const nuevosMes = socios.filter(s => {\n        const fechaCreacion = s.fechaCreacion?.toDate?.() || new Date(s.fechaCreacion);\n        return fechaCreacion >= startOfMonth;\n      }).length;\n\n      // Estadísticas por zona\n      const zonaStats = {};\n      socios.forEach(socio => {\n        if (socio.zona) {\n          zonaStats[socio.zona] = (zonaStats[socio.zona] || 0) + 1;\n        }\n      });\n\n      return {\n        success: true,\n        data: {\n          total,\n          activos,\n          inactivos: total - activos,\n          nuevosMes,\n          zonaStats\n        }\n      };\n    } catch (error) {\n      console.error('Error al obtener estadísticas:', error);\n      return {\n        success: false,\n        error: this.getErrorMessage(error)\n      };\n    }\n  }\n\n  async bulkDelete(ids) {\n    try {\n      const batch = writeBatch(db);\n      \n      ids.forEach(id => {\n        const docRef = doc(db, this.collectionName, id);\n        batch.delete(docRef);\n      });\n\n      await batch.commit();\n\n      return {\n        success: true,\n        message: `${ids.length} socios eliminados exitosamente`\n      };\n    } catch (error) {\n      console.error('Error en eliminación masiva:', error);\n      return {\n        success: false,\n        error: this.getErrorMessage(error)\n      };\n    }\n  }\n\n  async updateEstado(id, nuevoEstado) {\n    return this.updateSocio(id, { estado: nuevoEstado });\n  }\n\n  getErrorMessage(error) {\n    const errorMessages = {\n      'permission-denied': 'No tienes permisos para realizar esta operación',\n      'not-found': 'El socio no fue encontrado',\n      'unavailable': 'Servicio no disponible. Por favor, intenta más tarde',\n      'failed-precondition': 'Error en la operación. Verifica los datos',\n      'invalid-argument': 'Datos inválidos proporcionados'\n    };\n\n    if (error.code && errorMessages[error.code]) {\n      return errorMessages[error.code];\n    }\n\n    return error.message || 'Ha ocurrido un error inesperado';\n  }\n}\n\nexport default new SociosService();","import {\n  collection,\n  doc,\n  addDoc,\n  getDocs,\n  getDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  serverTimestamp\n} from 'firebase/firestore';\nimport { db, auth } from './firebase';\n\nclass ZonasService {\n  constructor() {\n    this.collectionName = 'zonas';\n  }\n\n  async createZona(zonaData) {\n    try {\n      const currentUser = auth.currentUser;\n      if (!currentUser) {\n        throw new Error('Usuario no autenticado');\n      }\n\n      const zona = {\n        ...zonaData,\n        activa: zonaData.activa !== undefined ? zonaData.activa : true,\n        fechaCreacion: serverTimestamp(),\n        fechaModificacion: serverTimestamp(),\n        creadoPor: currentUser.uid\n      };\n\n      const docRef = await addDoc(collection(db, this.collectionName), zona);\n      \n      return {\n        success: true,\n        id: docRef.id,\n        data: { id: docRef.id, ...zona },\n        message: 'Zona creada exitosamente'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Error al crear zona'\n      };\n    }\n  }\n\n  async getZonas() {\n    try {\n      const q = query(\n        collection(db, this.collectionName),\n        orderBy('nombre', 'asc')\n      );\n      \n      const snapshot = await getDocs(q);\n      const zonas = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n\n      return {\n        success: true,\n        data: zonas\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Error al obtener zonas'\n      };\n    }\n  }\n\n  async getZonasActivas() {\n    try {\n      const q = query(\n        collection(db, this.collectionName),\n        where('activa', '==', true),\n        orderBy('nombre', 'asc')\n      );\n      \n      const snapshot = await getDocs(q);\n      const zonas = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n\n      return {\n        success: true,\n        data: zonas\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Error al obtener zonas activas'\n      };\n    }\n  }\n\n  async updateZona(id, updates) {\n    try {\n      await updateDoc(doc(db, this.collectionName, id), {\n        ...updates,\n        fechaModificacion: serverTimestamp()\n      });\n\n      return {\n        success: true,\n        message: 'Zona actualizada exitosamente'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Error al actualizar zona'\n      };\n    }\n  }\n\n  async getZonaById(id) {\n    try {\n      const docSnap = await getDoc(doc(db, this.collectionName, id));\n      \n      if (docSnap.exists()) {\n        return {\n          success: true,\n          data: {\n            id: docSnap.id,\n            ...docSnap.data()\n          }\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Zona no encontrada'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Error al obtener zona'\n      };\n    }\n  }\n\n  async deleteZona(id) {\n    try {\n      // Primero obtener el nombre de la zona para verificar socios\n      const zonaDoc = await getDoc(doc(db, this.collectionName, id));\n      if (!zonaDoc.exists()) {\n        return {\n          success: false,\n          error: 'Zona no encontrada'\n        };\n      }\n\n      const zonaNombre = zonaDoc.data().nombre;\n\n      // Verificar si hay socios usando esta zona (por nombre, no por ID)\n      const sociosSnapshot = await getDocs(\n        query(collection(db, 'socios'), where('zona', '==', zonaNombre))\n      );\n\n      if (!sociosSnapshot.empty) {\n        return {\n          success: false,\n          error: `No se puede eliminar la zona \"${zonaNombre}\" porque tiene ${sociosSnapshot.size} socio(s) asociado(s)`\n        };\n      }\n\n      await deleteDoc(doc(db, this.collectionName, id));\n\n      return {\n        success: true,\n        message: 'Zona eliminada exitosamente'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Error al eliminar zona'\n      };\n    }\n  }\n\n  async getStats() {\n    try {\n      const zonasSnapshot = await getDocs(collection(db, this.collectionName));\n      const sociosSnapshot = await getDocs(collection(db, 'socios'));\n      \n      const zonas = zonasSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n      const socios = sociosSnapshot.docs.map(doc => doc.data());\n\n      const total = zonas.length;\n      const activas = zonas.filter(z => z.activa).length;\n\n      // Contar socios por zona\n      const sociosPorZona = {};\n      socios.forEach(socio => {\n        if (socio.zona) {\n          sociosPorZona[socio.zona] = (sociosPorZona[socio.zona] || 0) + 1;\n        }\n      });\n\n      return {\n        success: true,\n        data: {\n          total,\n          activas,\n          inactivas: total - activas,\n          sociosPorZona\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message || 'Error al obtener estadísticas'\n      };\n    }\n  }\n}\n\nexport default new ZonasService();","import * as yup from 'yup';\n\nexport const loginSchema = yup.object({\n  email: yup\n    .string()\n    .email('Correo electrónico inválido')\n    .required('El correo electrónico es requerido'),\n  password: yup\n    .string()\n    .min(6, 'La contraseña debe tener al menos 6 caracteres')\n    .required('La contraseña es requerida')\n});\n\nexport const registerSchema = yup.object({\n  displayName: yup\n    .string()\n    .min(3, 'El nombre debe tener al menos 3 caracteres')\n    .max(50, 'El nombre no puede tener más de 50 caracteres')\n    .required('El nombre es requerido'),\n  email: yup\n    .string()\n    .email('Correo electrónico inválido')\n    .required('El correo electrónico es requerido'),\n  password: yup\n    .string()\n    .min(6, 'La contraseña debe tener al menos 6 caracteres')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      'La contraseña debe contener al menos una mayúscula, una minúscula y un número'\n    )\n    .required('La contraseña es requerida'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Las contraseñas no coinciden')\n    .required('Confirme su contraseña')\n});\n\nexport const resetPasswordSchema = yup.object({\n  email: yup\n    .string()\n    .email('Correo electrónico inválido')\n    .required('El correo electrónico es requerido')\n});\n\nexport const changePasswordSchema = yup.object({\n  currentPassword: yup\n    .string()\n    .required('La contraseña actual es requerida'),\n  newPassword: yup\n    .string()\n    .min(6, 'La nueva contraseña debe tener al menos 6 caracteres')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n      'La contraseña debe contener al menos una mayúscula, una minúscula y un número'\n    )\n    .required('La nueva contraseña es requerida'),\n  confirmNewPassword: yup\n    .string()\n    .oneOf([yup.ref('newPassword'), null], 'Las contraseñas no coinciden')\n    .required('Confirme su nueva contraseña')\n});\n\n// Validaciones para personal (anteriormente socios)\nexport const socioSchema = yup.object({\n  dni: yup\n    .string()\n    .matches(/^\\d{8}$/, 'El DNI debe tener exactamente 8 dígitos')\n    .required('El DNI es requerido'),\n  nombres: yup\n    .string()\n    .min(2, 'Los nombres deben tener al menos 2 caracteres')\n    .max(50, 'Los nombres no pueden tener más de 50 caracteres')\n    .matches(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/, 'Los nombres solo pueden contener letras')\n    .required('Los nombres son requeridos'),\n  apellidos: yup\n    .string()\n    .min(2, 'Los apellidos deben tener al menos 2 caracteres')\n    .max(50, 'Los apellidos no pueden tener más de 50 caracteres')\n    .matches(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/, 'Los apellidos solo pueden contener letras')\n    .required('Los apellidos son requeridos'),\n  celular: yup\n    .string()\n    .matches(/^9\\d{8}$/, 'El celular debe empezar con 9 y tener 9 dígitos')\n    .required('El celular es requerido'),\n  zona: yup\n    .string()\n    .required('La zona es requerida')\n});\n\n// Validaciones para zonas\nexport const zonaSchema = yup.object({\n  nombre: yup\n    .string()\n    .min(3, 'El nombre debe tener al menos 3 caracteres')\n    .max(50, 'El nombre no puede tener más de 50 caracteres')\n    .required('El nombre es requerido'),\n  descripcion: yup\n    .string()\n    .max(200, 'La descripción no puede tener más de 200 caracteres')\n    .optional()\n});\n\n// Validaciones para campañas\nexport const campanaSchema = yup.object({\n  nombre: yup\n    .string()\n    .min(3, 'El nombre debe tener al menos 3 caracteres')\n    .max(100, 'El nombre no puede tener más de 100 caracteres')\n    .required('El nombre es requerido'),\n  descripcion: yup\n    .string()\n    .max(500, 'La descripción no puede tener más de 500 caracteres')\n    .optional(),\n  fechaInicio: yup\n    .date()\n    .required('La fecha de inicio es requerida'),\n  fechaFin: yup\n    .date()\n    .min(yup.ref('fechaInicio'), 'La fecha de fin debe ser posterior a la de inicio')\n    .required('La fecha de fin es requerida'),\n  activa: yup\n    .boolean()\n    .required('El estado es requerido')\n});"],"names":["_errors$dni","_errors$celular","_errors$nombres","_errors$apellidos","navigate","useNavigate","id","useParams","isEdit","Boolean","loading","setLoading","useState","initialLoading","setInitialLoading","zonas","setZonas","error","setError","success","setSuccess","showAddZonaModal","setShowAddZonaModal","newZonaName","setNewZonaName","newZonaDescription","setNewZonaDescription","savingZona","setSavingZona","register","handleSubmit","formState","errors","reset","setValue","useForm","resolver","yupResolver","socioSchema","defaultValues","dni","nombres","apellidos","celular","zona","useEffect","loadInitialData","loadSocio","async","zonasResult","zonasService","getZonas","Array","isArray","data","console","result","sociosService","getSocioById","socio","_jsx","Container","maxWidth","children","Box","sx","display","justifyContent","mt","CircularProgress","_jsxs","mb","Button","startIcon","ArrowBackIcon","onClick","Typography","variant","gutterBottom","color","Alert","severity","onClose","Card","CardContent","onSubmit","personalData","trim","estado","fechaRegistro","Date","updateSocio","createSocio","message","setTimeout","Grid","container","spacing","item","xs","md","TextField","fullWidth","label","placeholder","helperText","inputProps","maxLength","gap","alignItems","Autocomplete","options","getOptionLabel","option","nombre","renderOption","props","component","descripcion","renderInput","params","_errors$zona","onChange","event","value","noOptionsText","isOptionEqualToValue","IconButton","bgcolor","AddIcon","disabled","type","size","EditIcon","PersonAddIcon","Paper","p","Dialog","open","DialogTitle","DialogContent","e","target","margin","multiline","rows","DialogActions","zonaData","activa","createZona","constructor","this","collectionName","socioData","currentUser","auth","Error","serverTimestamp","fechaCreacion","fechaModificacion","creadoPor","uid","addDoc","collection","db","getErrorMessage","getSocios","arguments","length","undefined","pageSize","lastDoc","searchTerm","campana","orderField","orderDirection","q","conditions","push","where","query","orderBy","startAfter","limit","snapshot","getDocs","socios","docs","map","doc","filteredSocios","term","toLowerCase","filter","includes","hasMore","docSnap","getDoc","exists","updates","updateData","modificadoPor","updateDoc","deleteSocio","deleteDoc","getStats","total","activos","s","startOfMonth","setDate","setHours","nuevosMes","_s$fechaCreacion","_s$fechaCreacion$toDa","toDate","call","zonaStats","forEach","inactivos","bulkDelete","ids","batch","writeBatch","docRef","delete","commit","updateEstado","nuevoEstado","errorMessages","code","getZonasActivas","updateZona","getZonaById","deleteZona","zonaDoc","zonaNombre","sociosSnapshot","empty","zonasSnapshot","activas","z","sociosPorZona","inactivas","loginSchema","yup","email","required","password","min","displayName","max","matches","confirmPassword","oneOf","currentPassword","newPassword","confirmNewPassword","zonaSchema","optional","fechaInicio","fechaFin"],"sourceRoot":""}