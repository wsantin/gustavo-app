{"version":3,"file":"static/js/61.47226e46.chunk.js","mappings":"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","sources":["pages/personal/SocioForm.js","services/personal.service.js","services/zonas.service.js","utils/validators.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport {\r\n  Container,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  Alert,\r\n  CircularProgress,\r\n  Card,\r\n  CardContent,\r\n  Autocomplete,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions\r\n} from '@mui/material';\r\nimport {\r\n  ArrowBack as ArrowBackIcon,\r\n  Save as SaveIcon,\r\n  PersonAdd as PersonAddIcon,\r\n  Edit as EditIcon,\r\n  Add as AddIcon\r\n} from '@mui/icons-material';\r\nimport { socioSchema } from '../../utils/validators';\r\nimport sociosService from '../../services/personal.service';\r\nimport zonasService from '../../services/zonas.service';\r\n\r\nfunction SocioForm() {\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n  const isEdit = Boolean(id);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [initialLoading, setInitialLoading] = useState(isEdit);\r\n  const [zonas, setZonas] = useState([]);\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n  \r\n  // Modal para agregar nueva zona\r\n  const [showAddZonaModal, setShowAddZonaModal] = useState(false);\r\n  const [newZonaName, setNewZonaName] = useState('');\r\n  const [newZonaDescription, setNewZonaDescription] = useState('');\r\n  const [savingZona, setSavingZona] = useState(false);\r\n  \r\n  // Estado para el Autocomplete de zona\r\n  const [selectedZona, setSelectedZona] = useState(null);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n    setValue\r\n  } = useForm({\r\n    resolver: yupResolver(socioSchema),\r\n    defaultValues: {\r\n      dni: '',\r\n      nombres: '',\r\n      apellidos: '',\r\n      celular: '',\r\n      zona: ''\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const initializeForm = async () => {\r\n      // Limpiar zona seleccionada\r\n      setSelectedZona(null);\r\n      \r\n      // Primero cargar las zonas y esperar a que termine\r\n      console.log('🔄 Inicializando formulario...');\r\n      await loadInitialData();\r\n      \r\n      // Si es edición, cargar los datos después de que se hayan cargado las zonas\r\n      if (isEdit) {\r\n        // Obtener las zonas actualizadas del estado\r\n        const zonasResult = await zonasService.getZonas();\r\n        if (zonasResult.success) {\r\n          const zonasArray = Array.isArray(zonasResult.data) ? zonasResult.data : [];\r\n          console.log('🏢 Pasando zonas a loadSocio:', zonasArray.map(z => z.nombre));\r\n          await loadSocio(zonasArray);\r\n        } else {\r\n          await loadSocio([]);\r\n        }\r\n      }\r\n    };\r\n    \r\n    initializeForm();\r\n  }, [isEdit, id]);\r\n\r\n  const loadInitialData = async () => {\r\n    try {\r\n      const zonasResult = await zonasService.getZonas();\r\n      \r\n      if (zonasResult.success) {\r\n        setZonas(Array.isArray(zonasResult.data) ? zonasResult.data : []);\r\n      } else {\r\n        setZonas([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cargando datos iniciales:', error);\r\n      setError('Error al cargar las zonas');\r\n      setZonas([]);\r\n    }\r\n  };\r\n\r\n  const loadSocio = async (zonasArray = zonas) => {\r\n    setInitialLoading(true);\r\n    try {\r\n      console.log('🔍 Cargando datos del personal con ID:', id);\r\n      console.log('🏢 Zonas disponibles al momento de cargar:', zonasArray.map(z => z.nombre));\r\n      \r\n      const result = await sociosService.getSocioById(id);\r\n      \r\n      if (result.success) {\r\n        const socio = result.data;\r\n        console.log('📋 Datos del personal cargados:', socio);\r\n        \r\n        // Cargar campos del formulario con logs para debug\r\n        setValue('dni', socio.dni || '');\r\n        setValue('nombres', socio.nombres || '');\r\n        setValue('apellidos', socio.apellidos || '');\r\n        setValue('celular', socio.celular || '');\r\n        \r\n        // Verificar y cargar zona con debug\r\n        const zonaValue = socio.zona || '';\r\n        console.log('🏢 Zona a cargar:', zonaValue);\r\n        setValue('zona', zonaValue);\r\n        \r\n        // Encontrar la zona correspondiente en la lista y seleccionarla\r\n        if (zonaValue && zonasArray.length > 0) {\r\n          const zonaObj = zonasArray.find(z => z.nombre === zonaValue);\r\n          console.log('🏢 Zona encontrada para seleccionar:', zonaObj);\r\n          setSelectedZona(zonaObj || null);\r\n          \r\n          if (!zonaObj) {\r\n            console.warn('⚠️ No se encontró la zona en la lista disponible');\r\n          }\r\n        } else {\r\n          setSelectedZona(null);\r\n          if (zonaValue) {\r\n            console.warn('⚠️ Zona requerida pero lista de zonas vacía');\r\n          }\r\n        }\r\n        \r\n        setSuccess('Datos del personal cargados correctamente');\r\n      } else {\r\n        console.error('❌ Error al cargar personal:', result.error);\r\n        setError('No se pudo cargar los datos del personal: ' + result.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Error al cargar personal:', error);\r\n      setError('Error al cargar los datos del personal');\r\n    } finally {\r\n      setInitialLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddZona = async () => {\r\n    if (!newZonaName.trim()) return;\r\n    \r\n    setSavingZona(true);\r\n    try {\r\n      const zonaData = {\r\n        nombre: newZonaName.trim(),\r\n        descripcion: newZonaDescription.trim(),\r\n        activa: true\r\n      };\r\n      \r\n      const result = await zonasService.createZona(zonaData);\r\n      \r\n      if (result.success) {\r\n        // Recargar lista de zonas\r\n        await loadInitialData();\r\n        \r\n        // Crear objeto de zona para seleccionar\r\n        const nuevaZona = {\r\n          id: 'temp-' + Date.now(), // ID temporal\r\n          nombre: newZonaName.trim(),\r\n          descripcion: newZonaDescription.trim(),\r\n          activa: true\r\n        };\r\n        \r\n        // Seleccionar la nueva zona en el autocomplete\r\n        setSelectedZona(nuevaZona);\r\n        setValue('zona', newZonaName.trim());\r\n        \r\n        // Cerrar modal y limpiar\r\n        setShowAddZonaModal(false);\r\n        setNewZonaName('');\r\n        setNewZonaDescription('');\r\n        setSuccess('Nueva zona agregada exitosamente');\r\n      } else {\r\n        setError(result.error || 'Error al crear la zona');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al crear zona:', error);\r\n      setError('Error inesperado al crear la zona');\r\n    } finally {\r\n      setSavingZona(false);\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    setLoading(true);\r\n    setError('');\r\n    setSuccess('');\r\n\r\n    try {\r\n      let result;\r\n      \r\n      // Preparar datos para envío\r\n      const personalData = {\r\n        dni: data.dni.trim(),\r\n        nombres: data.nombres.trim(),\r\n        apellidos: data.apellidos.trim(),\r\n        celular: data.celular.trim(),\r\n        zona: data.zona,\r\n        // Campos adicionales para mantener compatibilidad\r\n        estado: 'activo',\r\n        fechaRegistro: new Date()\r\n      };\r\n\r\n      if (isEdit) {\r\n        result = await sociosService.updateSocio(id, personalData);\r\n      } else {\r\n        result = await sociosService.createSocio(personalData);\r\n      }\r\n\r\n      if (result.success) {\r\n        setSuccess(result.message);\r\n        setTimeout(() => {\r\n          navigate('/personal');\r\n        }, 1500);\r\n      } else {\r\n        setError(result.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al guardar personal:', error);\r\n      setError('Error inesperado al guardar los datos del personal');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (initialLoading) {\r\n    return (\r\n      <Container maxWidth=\"sm\">\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ mb: 3 }}>\r\n        <Button\r\n          startIcon={<ArrowBackIcon />}\r\n          onClick={() => navigate('/personal')}\r\n          sx={{ mb: 2 }}\r\n        >\r\n          Volver a la lista\r\n        </Button>\r\n        \r\n        <Typography variant=\"h4\" gutterBottom>\r\n          {isEdit ? 'Editar Personal' : 'Nuevo Personal'}\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"text.secondary\">\r\n          {isEdit ? 'Modifica los datos del personal' : 'Registra nuevo personal en el sistema'}\r\n        </Typography>\r\n      </Box>\r\n\r\n      {error && (\r\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError('')}>\r\n          {error}\r\n        </Alert>\r\n      )}\r\n\r\n      {success && (\r\n        <Alert severity=\"success\" sx={{ mb: 3 }} onClose={() => setSuccess('')}>\r\n          {success}\r\n        </Alert>\r\n      )}\r\n\r\n      <Card>\r\n        <CardContent>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <Grid container spacing={3}>\r\n              {/* DNI */}\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"DNI *\"\r\n                  placeholder=\"Ej: 12345678\"\r\n                  {...register('dni')}\r\n                  error={!!errors.dni}\r\n                  helperText={errors.dni?.message}\r\n                  inputProps={{ maxLength: 8 }}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Celular */}\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Celular *\"\r\n                  placeholder=\"Ej: 987654321\"\r\n                  {...register('celular')}\r\n                  error={!!errors.celular}\r\n                  helperText={errors.celular?.message}\r\n                  inputProps={{ maxLength: 9 }}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Nombres */}\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Nombres *\"\r\n                  placeholder=\"Ej: Juan Carlos\"\r\n                  {...register('nombres')}\r\n                  error={!!errors.nombres}\r\n                  helperText={errors.nombres?.message}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Apellidos */}\r\n              <Grid item xs={12} md={6}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Apellidos *\"\r\n                  placeholder=\"Ej: García López\"\r\n                  {...register('apellidos')}\r\n                  error={!!errors.apellidos}\r\n                  helperText={errors.apellidos?.message}\r\n                />\r\n              </Grid>\r\n\r\n              {/* Zona */}\r\n              <Grid item xs={12}>\r\n                <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-start', width: '100%' }}>\r\n                  <Autocomplete\r\n                    sx={{ flex: 1, minWidth: 200, maxWidth: 250 }}\r\n                    fullWidth\r\n                    options={zonas}\r\n                    value={selectedZona}\r\n                    getOptionLabel={(option) => option?.nombre || ''}\r\n                    renderOption={(props, option) => (\r\n                      <Box component=\"li\" {...props}>\r\n                        <Box>\r\n                          <Typography variant=\"body1\">{option.nombre}</Typography>\r\n                          {option.descripcion && (\r\n                            <Typography variant=\"caption\" color=\"text.secondary\">\r\n                              {option.descripcion}\r\n                            </Typography>\r\n                          )}\r\n                        </Box>\r\n                      </Box>\r\n                    )}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label=\"Zona *\"\r\n                        error={!!errors.zona}\r\n                        helperText={errors.zona?.message}\r\n                        placeholder=\"Buscar zona...\"\r\n                      />\r\n                    )}\r\n                    onChange={(event, value) => {\r\n                      console.log('🏢 Zona seleccionada:', value);\r\n                      setSelectedZona(value);\r\n                      setValue('zona', value ? value.nombre : '');\r\n                    }}\r\n                    noOptionsText=\"No se encontraron zonas\"\r\n                    isOptionEqualToValue={(option, value) => {\r\n                      if (!option || !value) return option === value;\r\n                      return option.nombre === value.nombre;\r\n                    }}\r\n                  />\r\n                  <IconButton\r\n                    color=\"primary\"\r\n                    onClick={() => setShowAddZonaModal(true)}\r\n                    sx={{ \r\n                      mt: 1,\r\n                      bgcolor: 'primary.light', \r\n                      '&:hover': { bgcolor: 'primary.main' },\r\n                      color: 'white'\r\n                    }}\r\n                  >\r\n                    <AddIcon />\r\n                  </IconButton>\r\n                </Box>\r\n              </Grid>\r\n\r\n              {/* Botones */}\r\n              <Grid item xs={12}>\r\n                <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    onClick={() => navigate('/personal')}\r\n                    disabled={loading}\r\n                  >\r\n                    Cancelar\r\n                  </Button>\r\n                  \r\n                  <Button\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    disabled={loading}\r\n                    startIcon={\r\n                      loading ? (\r\n                        <CircularProgress size={20} />\r\n                      ) : isEdit ? (\r\n                        <EditIcon />\r\n                      ) : (\r\n                        <PersonAddIcon />\r\n                      )\r\n                    }\r\n                  >\r\n                    {loading\r\n                      ? 'Guardando...'\r\n                      : isEdit\r\n                      ? 'Actualizar Personal'\r\n                      : 'Registrar Personal'\r\n                    }\r\n                  </Button>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Información adicional */}\r\n      <Paper sx={{ p: 3, mt: 3, bgcolor: 'grey.50' }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          ℹ️ Información Importante\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          • El DNI debe tener exactamente 8 dígitos<br/>\r\n          • El celular debe empezar con 9 y tener 9 dígitos en total<br/>\r\n          • Los nombres y apellidos solo pueden contener letras y espacios<br/>\r\n          • Todos los campos marcados con (*) son obligatorios\r\n        </Typography>\r\n      </Paper>\r\n\r\n      {/* Modal para agregar nueva zona */}\r\n      <Dialog \r\n        open={showAddZonaModal} \r\n        onClose={() => {\r\n          setShowAddZonaModal(false);\r\n          setNewZonaName('');\r\n          setNewZonaDescription('');\r\n        }}\r\n        maxWidth=\"sm\" \r\n        fullWidth\r\n      >\r\n        <DialogTitle>Agregar Nueva Zona</DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Nombre de la Zona *\"\r\n            value={newZonaName}\r\n            onChange={(e) => setNewZonaName(e.target.value)}\r\n            margin=\"normal\"\r\n            placeholder=\"Ej: Zona Norte\"\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            label=\"Descripción (opcional)\"\r\n            value={newZonaDescription}\r\n            onChange={(e) => setNewZonaDescription(e.target.value)}\r\n            margin=\"normal\"\r\n            multiline\r\n            rows={2}\r\n            placeholder=\"Ej: Comprende los distritos del norte de la ciudad\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button \r\n            onClick={() => {\r\n              setShowAddZonaModal(false);\r\n              setNewZonaName('');\r\n              setNewZonaDescription('');\r\n            }}\r\n            disabled={savingZona}\r\n          >\r\n            Cancelar\r\n          </Button>\r\n          <Button \r\n            onClick={handleAddZona}\r\n            variant=\"contained\"\r\n            disabled={!newZonaName.trim() || savingZona}\r\n            startIcon={savingZona ? <CircularProgress size={20} /> : <AddIcon />}\r\n          >\r\n            {savingZona ? 'Guardando...' : 'Agregar Zona'}\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default SocioForm;","import {\r\n  collection,\r\n  doc,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  limit,\r\n  startAfter,\r\n  serverTimestamp,\r\n  writeBatch\r\n} from 'firebase/firestore';\r\nimport { db, auth } from './firebase';\r\n\r\nclass SociosService {\r\n  constructor() {\r\n    this.collectionName = 'personal';\r\n  }\r\n\r\n  async createSocio(socioData) {\r\n    try {\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) {\r\n        throw new Error('Usuario no autenticado');\r\n      }\r\n\r\n      const socio = {\r\n        ...socioData,\r\n        estado: socioData.estado || 'activo',\r\n        fechaRegistro: socioData.fechaRegistro || serverTimestamp(),\r\n        fechaCreacion: serverTimestamp(),\r\n        fechaModificacion: serverTimestamp(),\r\n        creadoPor: currentUser.uid\r\n      };\r\n\r\n      const docRef = await addDoc(collection(db, this.collectionName), socio);\r\n      \r\n      return {\r\n        success: true,\r\n        id: docRef.id,\r\n        message: 'Personal creado exitosamente'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error al crear socio:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async getSocios(options = {}) {\r\n    try {\r\n      const {\r\n        pageSize = 100, // Aumentamos para filtrar del lado cliente\r\n        searchTerm = '',\r\n        zona = '',\r\n        campana = '',\r\n        estado = ''\r\n      } = options;\r\n\r\n      console.log('🔍 Buscando personal con filtros:', { searchTerm, zona, campana, estado });\r\n\r\n      // Query simple sin índices complejos\r\n      let q = collection(db, this.collectionName);\r\n      \r\n      // Solo ordenar por fecha de creación (sin filtros server-side por ahora)\r\n      q = query(q, orderBy('fechaCreacion', 'desc'), limit(pageSize));\r\n\r\n      const snapshot = await getDocs(q);\r\n      let socios = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n\r\n      console.log('📊 Total documentos obtenidos:', socios.length);\r\n\r\n      // FILTROS DEL LADO CLIENTE (temporal hasta crear índices)\r\n      if (zona && zona !== '') {\r\n        socios = socios.filter(socio => socio.zona === zona);\r\n        console.log('🏢 Filtrados por zona:', socios.length);\r\n      } else if (zona === '') {\r\n        console.log('🏢 Mostrando todas las zonas');\r\n      }\r\n\r\n      if (campana) {\r\n        socios = socios.filter(socio => socio.campana === campana);\r\n        console.log('📢 Filtrados por campaña:', socios.length);\r\n      }\r\n\r\n      if (estado) {\r\n        socios = socios.filter(socio => socio.estado === estado);\r\n        console.log('📊 Filtrados por estado:', socios.length);\r\n      }\r\n\r\n      // Filtro de búsqueda por texto\r\n      if (searchTerm) {\r\n        const term = searchTerm.toLowerCase();\r\n        socios = socios.filter(socio =>\r\n          (socio.nombres || '').toLowerCase().includes(term) ||\r\n          (socio.apellidos || '').toLowerCase().includes(term) ||\r\n          (socio.celular || '').includes(term) ||\r\n          (socio.dni || '').includes(term)\r\n        );\r\n        console.log('🔍 Filtrados por búsqueda:', socios.length);\r\n      }\r\n\r\n      console.log('✅ Personal encontrado:', socios.length);\r\n\r\n      return {\r\n        success: true,\r\n        data: socios,\r\n        total: socios.length\r\n      };\r\n    } catch (error) {\r\n      console.error('❌ Error al obtener personal:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async getSocioById(id) {\r\n    try {\r\n      const docSnap = await getDoc(doc(db, this.collectionName, id));\r\n      \r\n      if (docSnap.exists()) {\r\n        return {\r\n          success: true,\r\n          data: {\r\n            id: docSnap.id,\r\n            ...docSnap.data()\r\n          }\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: 'Personal no encontrado'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener personal:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async updateSocio(id, updates) {\r\n    try {\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) {\r\n        throw new Error('Usuario no autenticado');\r\n      }\r\n\r\n      const updateData = {\r\n        ...updates,\r\n        fechaModificacion: serverTimestamp(),\r\n        modificadoPor: currentUser.uid\r\n      };\r\n\r\n      await updateDoc(doc(db, this.collectionName, id), updateData);\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Personal actualizado exitosamente'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error al actualizar personal:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async deleteSocio(id) {\r\n    try {\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) {\r\n        throw new Error('Usuario no autenticado');\r\n      }\r\n\r\n      await deleteDoc(doc(db, this.collectionName, id));\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Personal eliminado exitosamente'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error al eliminar personal:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async getStats() {\r\n    try {\r\n      const snapshot = await getDocs(collection(db, this.collectionName));\r\n      const socios = snapshot.docs.map(doc => doc.data());\r\n\r\n      const total = socios.length;\r\n      const activos = socios.filter(s => s.estado === 'activo').length;\r\n      \r\n      // Socios del mes actual\r\n      const startOfMonth = new Date();\r\n      startOfMonth.setDate(1);\r\n      startOfMonth.setHours(0, 0, 0, 0);\r\n      \r\n      const nuevosMes = socios.filter(s => {\r\n        const fechaCreacion = s.fechaCreacion?.toDate?.() || new Date(s.fechaCreacion);\r\n        return fechaCreacion >= startOfMonth;\r\n      }).length;\r\n\r\n      // Estadísticas por zona\r\n      const zonaStats = {};\r\n      socios.forEach(socio => {\r\n        if (socio.zona) {\r\n          zonaStats[socio.zona] = (zonaStats[socio.zona] || 0) + 1;\r\n        }\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          total,\r\n          activos,\r\n          inactivos: total - activos,\r\n          nuevosMes,\r\n          zonaStats\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error al obtener estadísticas:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async bulkDelete(ids) {\r\n    try {\r\n      const batch = writeBatch(db);\r\n      \r\n      ids.forEach(id => {\r\n        const docRef = doc(db, this.collectionName, id);\r\n        batch.delete(docRef);\r\n      });\r\n\r\n      await batch.commit();\r\n\r\n      return {\r\n        success: true,\r\n        message: `${ids.length} socios eliminados exitosamente`\r\n      };\r\n    } catch (error) {\r\n      console.error('Error en eliminación masiva:', error);\r\n      return {\r\n        success: false,\r\n        error: this.getErrorMessage(error)\r\n      };\r\n    }\r\n  }\r\n\r\n  async updateEstado(id, nuevoEstado) {\r\n    return this.updateSocio(id, { estado: nuevoEstado });\r\n  }\r\n\r\n  getErrorMessage(error) {\r\n    const errorMessages = {\r\n      'permission-denied': 'No tienes permisos para realizar esta operación',\r\n      'not-found': 'El socio no fue encontrado',\r\n      'unavailable': 'Servicio no disponible. Por favor, intenta más tarde',\r\n      'failed-precondition': 'Error en la operación. Verifica los datos',\r\n      'invalid-argument': 'Datos inválidos proporcionados'\r\n    };\r\n\r\n    if (error.code && errorMessages[error.code]) {\r\n      return errorMessages[error.code];\r\n    }\r\n\r\n    return error.message || 'Ha ocurrido un error inesperado';\r\n  }\r\n}\r\n\r\nexport default new SociosService();","import {\r\n  collection,\r\n  doc,\r\n  addDoc,\r\n  getDocs,\r\n  getDoc,\r\n  updateDoc,\r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  serverTimestamp\r\n} from 'firebase/firestore';\r\nimport { db, auth } from './firebase';\r\n\r\nclass ZonasService {\r\n  constructor() {\r\n    this.collectionName = 'zonas';\r\n  }\r\n\r\n  async createZona(zonaData) {\r\n    try {\r\n      const currentUser = auth.currentUser;\r\n      if (!currentUser) {\r\n        throw new Error('Usuario no autenticado');\r\n      }\r\n\r\n      const zona = {\r\n        ...zonaData,\r\n        activa: zonaData.activa !== undefined ? zonaData.activa : true,\r\n        fechaCreacion: serverTimestamp(),\r\n        fechaModificacion: serverTimestamp(),\r\n        creadoPor: currentUser.uid\r\n      };\r\n\r\n      const docRef = await addDoc(collection(db, this.collectionName), zona);\r\n      \r\n      return {\r\n        success: true,\r\n        id: docRef.id,\r\n        data: { id: docRef.id, ...zona },\r\n        message: 'Zona creada exitosamente'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al crear zona'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getZonas() {\r\n    try {\r\n      const q = query(\r\n        collection(db, this.collectionName),\r\n        orderBy('nombre', 'asc')\r\n      );\r\n      \r\n      const snapshot = await getDocs(q);\r\n      const zonas = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n\r\n      return {\r\n        success: true,\r\n        data: zonas\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al obtener zonas'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getZonasActivas() {\r\n    try {\r\n      const q = query(\r\n        collection(db, this.collectionName),\r\n        where('activa', '==', true),\r\n        orderBy('nombre', 'asc')\r\n      );\r\n      \r\n      const snapshot = await getDocs(q);\r\n      const zonas = snapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n\r\n      return {\r\n        success: true,\r\n        data: zonas\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al obtener zonas activas'\r\n      };\r\n    }\r\n  }\r\n\r\n  async updateZona(id, updates) {\r\n    try {\r\n      await updateDoc(doc(db, this.collectionName, id), {\r\n        ...updates,\r\n        fechaModificacion: serverTimestamp()\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Zona actualizada exitosamente'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al actualizar zona'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getZonaById(id) {\r\n    try {\r\n      const docSnap = await getDoc(doc(db, this.collectionName, id));\r\n      \r\n      if (docSnap.exists()) {\r\n        return {\r\n          success: true,\r\n          data: {\r\n            id: docSnap.id,\r\n            ...docSnap.data()\r\n          }\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: 'Zona no encontrada'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al obtener zona'\r\n      };\r\n    }\r\n  }\r\n\r\n  async deleteZona(id) {\r\n    try {\r\n      // Primero obtener el nombre de la zona para verificar socios\r\n      const zonaDoc = await getDoc(doc(db, this.collectionName, id));\r\n      if (!zonaDoc.exists()) {\r\n        return {\r\n          success: false,\r\n          error: 'Zona no encontrada'\r\n        };\r\n      }\r\n\r\n      const zonaNombre = zonaDoc.data().nombre;\r\n\r\n      // Verificar si hay personal usando esta zona (por nombre, no por ID)\r\n      const personalSnapshot = await getDocs(\r\n        query(collection(db, 'personal'), where('zona', '==', zonaNombre))\r\n      );\r\n\r\n      if (!personalSnapshot.empty) {\r\n        return {\r\n          success: false,\r\n          error: `No se puede eliminar la zona \"${zonaNombre}\" porque tiene ${personalSnapshot.size} personal(es) asociado(s)`\r\n        };\r\n      }\r\n\r\n      await deleteDoc(doc(db, this.collectionName, id));\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Zona eliminada exitosamente'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al eliminar zona'\r\n      };\r\n    }\r\n  }\r\n\r\n  async getStats() {\r\n    try {\r\n      const zonasSnapshot = await getDocs(collection(db, this.collectionName));\r\n      const personalSnapshot = await getDocs(collection(db, 'Personal'));\r\n\r\n      const zonas = zonasSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n      const personal = personalSnapshot.docs.map(doc => doc.data());\r\n\r\n      const total = zonas.length;\r\n      const activas = zonas.filter(z => z.activa).length;\r\n\r\n      // Contar personal por zona\r\n      const personalPorZona = {};\r\n      personal.forEach(p => {\r\n        if (p.zona) {\r\n          personalPorZona[p.zona] = (personalPorZona[p.zona] || 0) + 1;\r\n        }\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        data: {\r\n          total,\r\n          activas,\r\n          inactivas: total - activas,\r\n          personalPorZona\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message || 'Error al obtener estadísticas'\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new ZonasService();","import * as yup from 'yup';\r\n\r\nexport const loginSchema = yup.object({\r\n  email: yup\r\n    .string()\r\n    .email('Correo electrónico inválido')\r\n    .required('El correo electrónico es requerido'),\r\n  password: yup\r\n    .string()\r\n    .min(6, 'La contraseña debe tener al menos 6 caracteres')\r\n    .required('La contraseña es requerida')\r\n});\r\n\r\nexport const registerSchema = yup.object({\r\n  displayName: yup\r\n    .string()\r\n    .min(3, 'El nombre debe tener al menos 3 caracteres')\r\n    .max(50, 'El nombre no puede tener más de 50 caracteres')\r\n    .required('El nombre es requerido'),\r\n  email: yup\r\n    .string()\r\n    .email('Correo electrónico inválido')\r\n    .required('El correo electrónico es requerido'),\r\n  password: yup\r\n    .string()\r\n    .min(6, 'La contraseña debe tener al menos 6 caracteres')\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\r\n      'La contraseña debe contener al menos una mayúscula, una minúscula y un número'\r\n    )\r\n    .required('La contraseña es requerida'),\r\n  confirmPassword: yup\r\n    .string()\r\n    .oneOf([yup.ref('password'), null], 'Las contraseñas no coinciden')\r\n    .required('Confirme su contraseña')\r\n});\r\n\r\nexport const resetPasswordSchema = yup.object({\r\n  email: yup\r\n    .string()\r\n    .email('Correo electrónico inválido')\r\n    .required('El correo electrónico es requerido')\r\n});\r\n\r\nexport const changePasswordSchema = yup.object({\r\n  currentPassword: yup\r\n    .string()\r\n    .required('La contraseña actual es requerida'),\r\n  newPassword: yup\r\n    .string()\r\n    .min(6, 'La nueva contraseña debe tener al menos 6 caracteres')\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\r\n      'La contraseña debe contener al menos una mayúscula, una minúscula y un número'\r\n    )\r\n    .required('La nueva contraseña es requerida'),\r\n  confirmNewPassword: yup\r\n    .string()\r\n    .oneOf([yup.ref('newPassword'), null], 'Las contraseñas no coinciden')\r\n    .required('Confirme su nueva contraseña')\r\n});\r\n\r\n// Validaciones para personal (anteriormente socios)\r\nexport const socioSchema = yup.object({\r\n  dni: yup\r\n    .string()\r\n    .matches(/^\\d{8}$/, 'El DNI debe tener exactamente 8 dígitos')\r\n    .required('El DNI es requerido'),\r\n  nombres: yup\r\n    .string()\r\n    .min(2, 'Los nombres deben tener al menos 2 caracteres')\r\n    .max(50, 'Los nombres no pueden tener más de 50 caracteres')\r\n    .matches(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/, 'Los nombres solo pueden contener letras')\r\n    .required('Los nombres son requeridos'),\r\n  apellidos: yup\r\n    .string()\r\n    .min(2, 'Los apellidos deben tener al menos 2 caracteres')\r\n    .max(50, 'Los apellidos no pueden tener más de 50 caracteres')\r\n    .matches(/^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$/, 'Los apellidos solo pueden contener letras')\r\n    .required('Los apellidos son requeridos'),\r\n  celular: yup\r\n    .string()\r\n    .matches(/^9\\d{8}$/, 'El celular debe empezar con 9 y tener 9 dígitos')\r\n    .required('El celular es requerido'),\r\n  zona: yup\r\n    .string()\r\n    .required('La zona es requerida')\r\n});\r\n\r\n// Validaciones para zonas\r\nexport const zonaSchema = yup.object({\r\n  nombre: yup\r\n    .string()\r\n    .min(3, 'El nombre debe tener al menos 3 caracteres')\r\n    .max(50, 'El nombre no puede tener más de 50 caracteres')\r\n    .required('El nombre es requerido'),\r\n  descripcion: yup\r\n    .string()\r\n    .max(200, 'La descripción no puede tener más de 200 caracteres')\r\n    .optional()\r\n});\r\n\r\n// Validaciones para campañas\r\nexport const campanaSchema = yup.object({\r\n  nombre: yup\r\n    .string()\r\n    .min(3, 'El nombre debe tener al menos 3 caracteres')\r\n    .max(100, 'El nombre no puede tener más de 100 caracteres')\r\n    .required('El nombre es requerido'),\r\n  descripcion: yup\r\n    .string()\r\n    .max(500, 'La descripción no puede tener más de 500 caracteres')\r\n    .optional(),\r\n  fechaInicio: yup\r\n    .date()\r\n    .required('La fecha de inicio es requerida'),\r\n  fechaFin: yup\r\n    .date()\r\n    .min(yup.ref('fechaInicio'), 'La fecha de fin debe ser posterior a la de inicio')\r\n    .required('La fecha de fin es requerida'),\r\n  activa: yup\r\n    .boolean()\r\n    .required('El estado es requerido')\r\n});"],"names":["_errors$dni","_errors$celular","_errors$nombres","_errors$apellidos","navigate","useNavigate","id","useParams","isEdit","Boolean","loading","setLoading","useState","initialLoading","setInitialLoading","zonas","setZonas","error","setError","success","setSuccess","showAddZonaModal","setShowAddZonaModal","newZonaName","setNewZonaName","newZonaDescription","setNewZonaDescription","savingZona","setSavingZona","selectedZona","setSelectedZona","register","handleSubmit","formState","errors","reset","setValue","useForm","resolver","yupResolver","socioSchema","defaultValues","dni","nombres","apellidos","celular","zona","useEffect","async","console","log","loadInitialData","zonasResult","zonasService","getZonas","zonasArray","Array","isArray","data","map","z","nombre","loadSocio","initializeForm","arguments","length","undefined","result","sociosService","getSocioById","socio","zonaValue","zonaObj","find","warn","_jsx","Container","maxWidth","children","Box","sx","display","justifyContent","mt","CircularProgress","_jsxs","mb","Button","startIcon","ArrowBackIcon","onClick","Typography","variant","gutterBottom","color","Alert","severity","onClose","Card","CardContent","onSubmit","personalData","trim","estado","fechaRegistro","Date","updateSocio","createSocio","message","setTimeout","Grid","container","spacing","item","xs","md","TextField","fullWidth","label","placeholder","helperText","inputProps","maxLength","gap","alignItems","width","Autocomplete","flex","minWidth","options","value","getOptionLabel","option","renderOption","props","component","descripcion","renderInput","params","_errors$zona","onChange","event","noOptionsText","isOptionEqualToValue","IconButton","bgcolor","AddIcon","disabled","type","size","EditIcon","PersonAddIcon","Paper","p","Dialog","open","DialogTitle","DialogContent","e","target","margin","multiline","rows","DialogActions","zonaData","activa","createZona","nuevaZona","now","constructor","this","collectionName","socioData","currentUser","auth","Error","serverTimestamp","fechaCreacion","fechaModificacion","creadoPor","uid","addDoc","collection","db","getErrorMessage","getSocios","pageSize","searchTerm","campana","q","query","orderBy","limit","socios","getDocs","docs","doc","filter","term","toLowerCase","includes","total","docSnap","getDoc","exists","updates","updateData","modificadoPor","updateDoc","deleteSocio","deleteDoc","getStats","activos","s","startOfMonth","setDate","setHours","nuevosMes","_s$fechaCreacion","_s$fechaCreacion$toDa","toDate","call","zonaStats","forEach","inactivos","bulkDelete","ids","batch","writeBatch","docRef","delete","commit","updateEstado","nuevoEstado","errorMessages","code","snapshot","getZonasActivas","where","updateZona","getZonaById","deleteZona","zonaDoc","zonaNombre","personalSnapshot","empty","zonasSnapshot","personal","activas","personalPorZona","inactivas","loginSchema","yup","email","required","password","min","displayName","max","matches","confirmPassword","oneOf","currentPassword","newPassword","confirmNewPassword","zonaSchema","optional","fechaInicio","fechaFin"],"sourceRoot":""}